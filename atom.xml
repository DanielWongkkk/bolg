<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://danielwongkkk.github.io/bolg</id>
    <title>Gridea</title>
    <updated>2022-08-06T05:06:52.733Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://danielwongkkk.github.io/bolg"/>
    <link rel="self" href="https://danielwongkkk.github.io/bolg/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://danielwongkkk.github.io/bolg/images/avatar.png</logo>
    <icon>https://danielwongkkk.github.io/bolg/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[清理 AppData 文件夹]]></title>
        <id>https://danielwongkkk.github.io/bolg/post/qing-li-appdata-wen-jian-jia/</id>
        <link href="https://danielwongkkk.github.io/bolg/post/qing-li-appdata-wen-jian-jia/">
        </link>
        <updated>2022-08-01T08:57:33.000Z</updated>
        <content type="html"><![CDATA[<p>电脑每过一段时间空间就不够用，我之前的方法就是去重装系统，但这样的方法仅能维持一段时间</p>
<p>今天我去重装系统时，发现AppData文件夹占用空间巨大，于是一个个点进去看看到底哪些文件比较占空间</p>
<figure data-type="image" tabindex="1"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220801155012476.png" alt="image-20220801155012476" loading="lazy"></figure>
<p>AppData主要是应用程序的配置文件和缓存文件，即使我们将应用程序安装到 D 盘，仅仅是将程序安装文件的大小放到了 D 盘，而程序运行时所产生的文件，仍然会存放到 C 盘中，也就是 AppData 文件夹下</p>
<p>所以就算将程序放到 D 盘，C 盘占用的空间也会随着程序的运行而越来越大</p>
<p><strong>所以一劳永逸的解决方法就是扩大 C 盘的空间</strong>，要是暂时没法购买大硬盘来扩大 C 盘的话，就只能每隔一段时间来清理 C 盘的 AppData 文件夹了</p>
<h3 id="寻找-appdata-占用空间大的文件">寻找 AppData 占用空间大的文件</h3>
<p>AppData 下有如下文件夹：</p>
<ul>
<li>Local：应用程序运行时产生的文件</li>
<li>LocalLow：共享数据存放文件</li>
<li>Roaming：应用程序的配置信息，较为重要，不建议动该文件夹</li>
</ul>
<p>其中主要占空间的是 Local 文件夹，对于我来讲，主要占空间的是以下文件夹：</p>
<h4 id="docker">Docker</h4>
<figure data-type="image" tabindex="2"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220801162927807.png" alt="image-20220801162927807" loading="lazy"></figure>
<p>这是安装 Docker desktop 后才有的文件夹，发现 Docker 会生成一个镜像文件，在这个镜像文件中来运行你所下载的 Docker 镜像，换句话说，这就是 Dokcer 下的文件系统，你在 windows 中划分了这块空间来给 Docker 运行</p>
<h4 id="spotify">Spotify</h4>
<figure data-type="image" tabindex="3"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220801163543452.png" alt="image-20220801163543452" loading="lazy"></figure>
<p>主要存放 Spotify 的音乐缓存文件</p>
<h4 id="temp">Temp</h4>
<figure data-type="image" tabindex="4"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220801163617541.png" alt="image-20220801163617541" loading="lazy"></figure>
<p>主要存放临时文件，可以删除，但应用程序的加载速度可能会受到一定影响</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RNN 简述]]></title>
        <id>https://danielwongkkk.github.io/bolg/post/rnn/</id>
        <link href="https://danielwongkkk.github.io/bolg/post/rnn/">
        </link>
        <updated>2022-07-30T04:56:27.000Z</updated>
        <content type="html"><![CDATA[<h4 id="优势">优势</h4>
<p>处理序列数据，这就非常适合处理文本、视频等信息</p>
<p>卷积 CNN 的输入之间没什么联系，单个输入对应着单个输出</p>
<p>卷积 CNN 的问题是不足以应付更复杂的场景，比如视频信息，一句话，想要知道视频的含义或一句话的含义，单凭单个无连续的输入图片或单词，不足以推断出语义信息。需要输入之间的序列信息，上下文信息</p>
<h4 id="常见的序列数据">常见的序列数据</h4>
<ul>
<li>文本</li>
<li>音视频</li>
<li>房价走势</li>
</ul>
<p>所以想要处理文本、音视频、房价预测这样的工作时，就需要用到 RNN</p>
<h4 id="传统神经网络与-rnn-的对比">传统神经网络与 RNN 的对比</h4>
<figure data-type="image" tabindex="1"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220722160259516.png" alt="image-20220722160259516" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220722160353054.png" alt="image-20220722160353054" loading="lazy"></figure>
<p>这样做的好处就是，最有一层会包含之间所有输入的信息</p>
<h4 id="rnn-的缺点">RNN 的缺点</h4>
<p>最近的输入占的比重大，而之前的输入占的比重小</p>
<figure data-type="image" tabindex="3"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/blog_img/image-20220722160601327.png" alt="image-20220722160601327" loading="lazy"></figure>
<h4 id="rnn-的优化算法">RNN 的优化算法</h4>
<p>由于 RNN 的缺点，出现了一系列的基于 RNN 的优化算法</p>
<h5 id="lstm">LSTM</h5>
<p>长短时记忆网络，LSTM 会保留长序列中的重要信息，忽略不重要的信息</p>
<h5 id="gru">GRU</h5>
<p>在 LSTM 上优化得来，在训练大数据集时，可以节省时间</p>
<p>参考链接</p>
<blockquote>
<p><a href="https://easyai.tech/ai-definition/rnn/">一文看懂循环神经网络 RNN（2种优化算法+5个实际应用） (easyai.tech)</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows docker 显示 docker filesharing问题]]></title>
        <id>https://danielwongkkk.github.io/bolg/post/windows-docker-xian-shi-docker-filesharing-wen-ti/</id>
        <link href="https://danielwongkkk.github.io/bolg/post/windows-docker-xian-shi-docker-filesharing-wen-ti/">
        </link>
        <updated>2022-07-29T15:39:19.000Z</updated>
        <content type="html"><![CDATA[<p>使用windows docker时，出于安全考虑windows会限制docker能访问的文件路径，所以需要指定哪些路径下的文件docker能够访问</p>
<p>点击 share it docker便能访问到该路径下的文件</p>
<figure data-type="image" tabindex="1"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/image-20220728100818374.png" alt="image-20220728100818374" loading="lazy"></figure>
<p>但每次运行程序都会生成一个新文件，每次运行docker时能到都要点击 share it 么？</p>
<p>为了解决这个问题，就需要在 docker 里面设置windows的挂载路径，这样 docker 就能访问到该路径下的所有文件，而不用每次点击 share it</p>
<figure data-type="image" tabindex="2"><img src="https://typoraimagekkk.oss-cn-guangzhou.aliyuncs.com/image-20220728101316119.png" alt="image-20220728101316119" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么写博客]]></title>
        <id>https://danielwongkkk.github.io/bolg/post/wei-shi-me-xie-bo-ke/</id>
        <link href="https://danielwongkkk.github.io/bolg/post/wei-shi-me-xie-bo-ke/">
        </link>
        <updated>2022-07-25T12:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>其实互联网时代，特别是作为程序员，遇到的大多数问题，早就有人遇到过了，并将其解决方法放到了网上</p>
<p>很多问题，百度或者Google就能得到解决，而写博客，似乎也没什么必要，大家都是遇到差不多的问题，解决方法也差不多，博客大部分都同质化了</p>
<p>所以博客还是得放一些个性化的问题及解决方案，那些普通而大众的问题，也没必要记录，随手一搜就能得到解决方案</p>
<p>博客作为记录的载体，避免忘记，还是需要记录自己遇到的难解决的、百度不到的、个性化的问题，这也是我决定写博客的初衷</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://danielwongkkk.github.io/bolg/post/hello-gridea/</id>
        <link href="https://danielwongkkk.github.io/bolg/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>